# Informatische Grundbegriffe {#sec-informatische-grundbegriffe}
\normalsize

* Wissenschaftliche Daten liegen heutzutage als digitale Daten vor. 
* Digitale Daten werden mit Hilfe eines Computers analysiert.
* Zur Analyse von digitalen Daten schreibt man Computerprogramme.
* Diese Computerprogramme heißen Datenanalyseskripte.

Struktur computergestützter Datenanalyse

1. Einlesen und Bereinigen eines digitalen Datensatzes
2. Berechnung und Visualisierung deskriptiver Statistiken
3. Probabilistische Modellierung und Inferenz
4. Dokumentation und Präsentation der Ergebnisse

Typische Werkzeuge zur Analyse psychologischer Daten

* [R](https://www.r-project.org/) (frei, Datenwissenschaft, Statistik, Psychologie)
* [Python](https://www.python.org/psf/) (frei, Datenwissenschaft, Anwendung)
* [Matlab](https://de.mathworks.com/) (kommerziell, Engineering, Neuroimaging)

Altmodisch

* [SPSS](https://www.ibm.com/de-de/analytics/spss-statistics-software) (kommerziell, Sozialwissenschaften, Psychologie)
* [JMP](https://www.jmp.com/de_de/home.html}{JMP}) (kommerziell, Biologie, Psychologie)
* [STATA](https://www.stata.com/) (kommerziell, Wirtschaftswissenschaften)

PopularitY of Programming Language

* Googlesuchanfragen zu Programmiersprachentutorials
* [PYPL Index September 2021](https://pypl.github.io/PYPL.html)

Datenanalyseskripte

* Dokumentation aller Schritte vom Rohdatum zur Datenvisualisierung.
* Reproduktion wissenschaftlicher Ergebnisse durch Dritte.
* Essentieller Teil wissenschaftlicher Publikationen.
* Essentieller Teil täglicher wissenschaftlicher Arbeit.

Zusammenfassung

* Die Digitalisierung betrifft insbesondere auch die Wissenschaft.
* Forschungsdatenmanagement ist eine akute Herausforderung.
* Programmierung als zentrales Handwerkszeug wissenschaftlicher Arbeit.
* Informatikkenntnisse sind in der Arbeitswelt unverzichtbar.
* Dies gilt auch für Psychotherapeut:innen (z.B. Online-Intervention).

## Informatische Grundbegriffe {#sec-informatische-grundbegriffe}

Informatik (engl. Computer Science)

"Bei der Informatik handelt es sich um die Wissenschaft von der systematischen 
Darstellung, Speicherung, Verarbeitung und Übertragung von Informationen, wobei 
besonders die automatische Verarbeitung mit Computern betrachtet wird. Sie ist 
zugleich Grundlagen- und Formalwissenschaft als auch Ingenieurdisziplin. (Wikipedia)"


Zentrale Komponenten der Informatik

Computer

* Maschinen zum Datenspeichern und Ausführen einfacher Datenoperationen.
* Einfache Operationen mit extrem hoher Geschwindigkeit.
* Universalität durch Speicherung von Daten und Programmen.

Algorithmen und Programme

* *Programme* sind in einer *Programmiersprache* verfasste *Algorithmen*.
* Algorithmen sind Folgen von Anweisungen durchzuführender Operationen.
* Bei Algorithmen unterscheidet man
    * Beschreibung (Kochrezept, IKEA Bauanleitung, R Skript)
    * Anweisungen ("Mehl und Wasser vermengen", o - - -,  x = c(1,2,3))
    * Durchführung (Kochvorgang, Zusammenbau, R Skript laufen lassen)

Teilgebiete der Informatik mit Relevanz für die Psychologie 

* Theoretische Informatik: Automatentheorie, Berechenbarkeitstheorie, Komplexitätstheorie
* Angewandte Informatik: Anwendungssoftware, Human-Computer-Interaction , Informatik und Gesellschaft
* Technische Informatik:  Mikroprozessortechnik, Rechnerarchitektur, Netzwerktechnik
*  Praktische Informatik:  Programmierung , Algorithmen , Datenbanken

Spezialgebiete der Informatik mit Relevanz für die Psychologie

Maschinelles Lernen und Künstliche Intelligenz

* Datenanalyse aus Sicht der Informatik

Computervisualistik

* Bilderkennung und Bildsynthese, Virtuelle Realität, Augmented Reality

Computerlinguistik

* Spracherkennung und Sprachsynthese

Bioinformatik

* Lebenswissenschaften, Genomik, Bildgebende Verfahren der Medizin

### Rechnerarchitektur {#sec-rechnerarchitektur}

Hardwarekomponenten eines Computers

Zentraleinheit (Hauptplatine, Motherboard, Mainboard)

CPU (Central Processing Unit/Mikroprozessor)

* Rechenwerk, Steuerwerk, und Leitwerk des Systems
* Cache (flüchtiger schneller Speicher)
* Intel(R) Core(TM) i5-7300HQ CPU @ 2.50GHz

RAM (Random Access Memory)

* Temporärer, flüchtiger Arbeitsspeicher des Systems
* Begrenzt, z.B. 16 GB

Massenspeicher

* Stationärer Speicher des Systems
* SSD (Solid State Drive), Cloudspeicher

GPU (Graphical Processing Unit)

* Leistungsstarke, speziell für Visualisierung optimierte Prozessoren
* Unterstützung der CPU in manchen Anwendungen, z.b. Neuronale Netze

Von Neumann-Architektur

* John von Neumann (1945) First Draft of a Report on the EDVAC (Electronic Discrete Variable Automatic Computer) 
"The orders which are received by CC [Central Control] come from M [Memory], i.e. 
from the same place where the numerical material is stored." (Sec. 14.0)
* Rechner := Steuerwerk, Rechenwerk, Speicher, Eingabewerk, Ausgabewerk.
* Eingabe von Programmen und Daten in den Speicher.
* Daten, Programme, Zwischen- und Endergebnisse liegen im gleichen Speicher.
* Speicher ist in gleichgroße nummerierte (addressierte) Zellen unterteilt.
* Über die Adresse einer Speicherzelle kann deren Inhalt abgerufen/verändert werden.
* Aufeinanderfolgende Befehle eines Programms liegen in benachbarten Speicherzellen.
* Steuerwerk ruft den nächsten Befehl durch Erhöhen der Befehlsaddresse um 1 auf.
* Sprungbefehle erlauben eine Abweichung von der gespeicherten Reihenfolge
* Grundlegende Befehle sind
  * Arithmetische Befehle (z.B. Addition, Multiplikation)
  * Logische Vergleiche (z.B. logisches UND, logisches ODER)
  * Transportbefehle (z.B. Eingabewerk $\rightarrow$ Speicher, Speicher $\rightarrow$ Rechenwert)
* Alle Daten (z.B. Befehle, Adressen) werden binär codiert
* Binäre Enkodierung/Dekodierung geschieht durch geeignete Schaltwerke.
* $\Rightarrow$ Daten und Programme können in den Speicher geladen werden. 
* $\Rightarrow$ Sequentielle Abarbeitung von Befehlen ist Grundprinzip der Progammierung 

## Algorithmen und Programme {#sec-algorithmen-und-programme}

Vom Realwertproblem zum Programm

Realwertproblem

* Das Problem, das mithilfe eines Computers gelöst werden soll.
* Beispiel: Auswertung von Fragebogendaten einer psychologischen Studie.

Problemspezifikation

* Genaue sprachliche Fassung des Realweltproblems.
* Beispiel: Methodenteil einer wissenschaftlichen Publikation.

Algorithmus

* Folge von Anweisungen zur Lösung des Problems.
* Beispiel: Dateneinlesen, deskriptive Statistiken berechnen, T-Test durchführen.

Programm

* Ein Algorithmus, der von einem Computer ausgeführt werden kann.
* Eine in einer Programmiersprache verfasste Textdatei.


Definition: Algorithmus

Ein Algorithmus ist eine Folge von Anweisungen, um aus gewissen Eingabedaten 
bestimmte Ausgabedaten herzuleiten, wobei folgende Bedingungen erfüllt sein müssen


* Finitheit. Die Anweisungsfolge ist in einem endlichen Text vollständig beschrieben sein.
* Effektivität. Jede Anweisung muss tatsächlich ausführbar sein.
* Terminierung. Der Algorithmus endet nach endlich vielen Anweisungen.
* Determiniertheit. Der Ablauf des Algorithmus ist zu jedem Punkt fest vorgeschrieben.


Wenn $E$ die Menge der zulässigen Eingabedaten und $A$ die Menge der zulässigen 
Ausgabedaten bezeichnet, dann ist ein Algorithmus eine Funktion
\begin{equation}
f : E \to A, e \mapsto f(e)
\end{equation}
Umgekehrt heißen Funktionen, die durch einen Algorithmus beschrieben werden 
können, berechenbare Funktionen.

Bemerkung

* Effektivität sollte nicht mit Effizienz verwechselt werden.

### Programmiersprachen

* Bestimmt die Regeln, denen ein Programm gehorchen muss
* Definiert eine Syntax, also Vokabular und Programmaufbau
* Definiert Semantik, also die Bedeutung der erlaubten Anweisungen


Maschinensprache

* Elementare Operationsbefehle (z.B. Speichern, Vergleichen, Addieren)
* Elementare Operationsbefehle werden als Binärzahlen kodiert


\begin{center}
\begin{tabular}{ll}
Addiere Inhalt R1 zu Inhalt R2 	& $\Rightarrow$ 1001 0010 \\
Erhöhe Inhalt R um 1  			    & $\Rightarrow$ 1001 0110 \\
Übertrage Inhalt R1 nach R3    	& $\Rightarrow$ 0010 0011
\end{tabular}
\end{center}


* Programme in Maschinensprache heißen *Maschinenprogramme*
* De facto führt ein Computer nur Maschinenprogramme aus
* Für Menschen ist die Programmierung in Maschinensprache mühselig.

Höhere Programmiersprache

* An die menschliche Sprache angelehnte Wörter und Sätze
* Interpreter oder Compiler übersetzen Programme in Maschinensprache
* R, Python, Matlab, C++, Java, FORTRAN, COBOL,...

Generationen von Programmiersprachen

1. Generation (1GL)

* Maschinensprachen
* 10110000 01100001 (in hexadezimaler Darstellung: B0 61)

2. Generation (2GL)

* Assemblersprachen ab 1950, erste Form der symbolischen Programmierung
* Bspw. ``MOV Al, 61H'' \# Intel-Prozessor-spezifische Sprache

3. Generation (3GL)

* Höhere Programmiersprachen ab 1970 wie FORTRAN, C, C++, Java
* Programmierfreundlich, prozessor-unabhängig

4. Generation (4GL)

* Höhere Programmiersprachen ab 1980 wie Python, Matlab, R
* Codeoverhead Minimisierung, Automation, Flexibilität, Multiparadigmatisch

Imperative Programmierung


* Problemlösungsweg wird als Folge von *Anweisungen (Befehlen)* vorgegeben.
* Befehle verarbeiten Daten, die mithilfe von *Variablen* adressiert werden.
    * Prozedurale imperative Programmierung
        * Daten und sie manipulierende Befehle werden separat behandelt.
        * Prozeduren (Funktionen) bilden das zentrale Strukturkonzept.
    * Objektorientierte imperative Programmierung
        * Daten und manipulierende Befehle werden als *Objekte* zusammengefasst.
        * Objekte bilden das zentrale Strukturkonzept.
* Praktisch liegen oft Mischformen vor.


Kompilierte Programmiersprachen


* Gesamter Quellcode wird *vor der Ausführung* in Maschinensprache übersetzt.
* Das Übersetzungsprogramm heißt *Compiler*.
* Der übersetzte Maschinencode wird vom Prozessor ausgeführt.
* Das ausführbare Programm wird nicht übersetzt und läuft schnell.
* Bei Änderungen des Quellcodes muss neu kompiliert werden.
* Beispiele für kompilierte Sprachen sind Java, C, C++.


Interpretierte Programmiersprachen

* Quellcode wird *während der Ausführung* in maschinennahe Sprache übersetzt.
* Das Ausführungsprogramm heißt *Interpreter*.
* Das Programm läuft aufgrund der Interpretation langsamer.
* Bei Änderungen des Quellcodes muss nicht neu interpretiert werden.
* Beispiele für interpretierte Sprachen sind Python und R.

Die Programmiersprache R  ist

* ... eine imperative Programmiersprache ,
* ... perse objektorientiert, kann aber prozedural genutzt werden,
* ... eine höhere Programmiersprache der 4. Generation,
* ... eine interpretierte Sprache,
* ... auf die statistische Analyse von Daten zugeschnitten.

## R, VSCode und Quarto {#sec-r-und-vscode}
### R {#sec-r}
Was ist R? 

* Eine Programmiersprache und ein Softwarepaket.
* Entwickelt von @ihaka1996.
* Freier Dialekt der propietären Software S (@becker1988).
* Weiterentwickelt und gepflegt durch [R Core Team](https://www.r-project.org/contributors.html) und [R Foundation](https://www.r-project.org/foundation/)
* Interpretierte imperativ-objektorientierte 4GL Sprache.
* Optimiert und populär für statistische Datenanalysen.
* Große Community mit etwa 20.000 beigetragenen R Paketen (Erweiterungen)
* Evolviert und konservativ im Kern, konsistent und progressiv in [R Paketen](https://cran.r-project.org/web/packages/).
* Runterladen (z.B. \url{https://cran.r-project.org/bin/windows/base/}) und installieren.

Was kann man mit R machen? 

* Datensätze laden, manipulieren, und speichern.
* Eine Vielzahl von Berechnungen an verschiedenen Datenstrukturen durchführen.
* Eine Vielzahl statistischer Analysemethoden auf Daten anwenden.
* Datenanalyseskripte schreiben und Abbildungen generieren.

Was kann man mit R (bisher) nicht so gut machen? 

* In einer ansprechenden Umgebung programmieren ($\Rightarrow$ VSCode).
* Scientific Computing ($\Rightarrow$ Python, Matlab, Julia).
* Psychologische Experimente programmieren ($\Rightarrow$ Python, Matlab)

Wie bekommt man Hilfe zu R? 

* Google
* ChatGPT
* Während der Programmierung und bei bekanntem Funktionsnamen
```{r, eval = F, echo = T}
?mean
help(mean)
```
* Für längere Tutorials
```{r, eval = F, echo = T}
browseVignettes()
```

\url{https://rseek.org/}
\url{https://www.rstudio.com/resources/cheatsheets/}
\url{https://www.r-bloggers.com/}


Base R vs R

### VSCode {#sec-vscode}

Was ist VSCode? 

* Visual Studio Code (VSCode) ist ein kostenloser Quelltext-Editor von Microsoft.
* Grob gesagt ist VSCode so etwas wie RStudio *für alle Programmiersprachen*.
* VSCode ist seit 2015 für Windows, macOS und Linux verfügbar. 
* Seit 2018 ist VSCode der beliebteste Editor laut jährlicher stackoverflow Umfragen.
* Ein Microsoftprodukt ist damit auch der beliebteste Editor der Linuxwelt.
* Über Extensions kann VSCode als IDE für beliebige Sprachen genutzt werden.
* Zum Beispiel funktioniert VSCode als IDE für R, Python, Julia, Shell, Quarto, etc.
* VSCode ist Community-based und sehr konfigurierbar. 
* VSCode ist über Microsoft's GitHub über Endgeräte synchronisierbar.


Wie bekomme ich VSCode? 

[\textcolor{blue}{www.code.visualstudio.com}](https://code.visualstudio.com)

Wie benutze ich VSCode? 

[\textcolor{blue}{www.code.visualstudio.com/docs}](https://code.visualstudio.com/docs)

R in VSCode interaktiv benutzen (Belinda)

R Skripte in VSCode erstellen (Belinda)


### Quarto {#sec-quarto}

Was ist Quarto? 

* Ein seit 2022 verfügbares freies wissenschaftlich-technisches Publikationssystem
* Eine Weiterentwicklung von [RMarkdown}](https://rmarkdown.rstudio.com/) und [RBookdown}](https://bookdown.org/) durch [Posit}](https://posit.co/) 
* RMarkdown/RBookdown sind RStudio Adaptationen von [Markdown}](https://www.markdownguide.org/) und [Jupyter Notebooks}](https://jupyter.org/)
* Allgemeines Ziel ist hier die einfache Integration von ausführbarem Programmiercode in ein ansprechendes Text-, Tabellen- und Abbildungslayout für Web- und Printdokumente.
* Quarto nutzt  [Markdown}](https://www.markdownguide.org/) und [Latex}](https://www.latex-project.org/) für Layoutprozesse.
* Quarto nutzt [Pandoc}](https://pandoc.org/) für multiple Outputformate (.html, .docx, .pdf, etc.)
* Quarto läuft smoother und schneller als RMarkdown und RBookdown.


Wie bekomme ich Quarto? 

Wie benutze ich Quarto in VSCode? 

Was ist Markdown? 

* Eine Markup Language (Auszeichnungssprache) zur Erzeugung formatierten Texts 
* Eine HTML Alternative zur Erstellung von Webseiten etc. mithilfe einfacher Texteditoren
* Von John Gruber und Aaron Swartz 2004 mit dem Ziel hoher Lesbarkeit entwickelt  

Was ist LaTeX?

* Ein Softwarepaket zur Vereinfachung von [TeX}](https://ctan.org/tex?lang=en)
* [TeX}](https://ctan.org/tex?lang=en) ist ein von Donald E. Knuth ab 1977 entwickeltes Textsatzsystem mit Makrosprache
* LaTeX wurde von Leslie Lamport Anfang 1984 entwickelt 
* LaTeX ist insbesondere für mathematische Berichte und Präsentationen (Beamer) nützlich

Was ist Pandoc? 


* [Pandoc}](https://pandoc.org/) ist eine kostenlose Document Conversion Software von John MacFarlane  
* [Pandoc}](https://pandoc.org/) ist in die Quarto Engine integriert
* Einige von [Pandocs}](https://pandoc.org/) Konvertierungsoptionen sind im Folgenden aufgeführt

Wie benutze ich Quarto? 

Berichte und Präsentationen mit Quarto

Was ist ein Referenzmanager?

* Referenzmanager sind Literaturverwaltungsprogramme
* Referenzmanager unterstützen Zitationen und das Erstellen von Literaturverzeichnissen 
* Zitierstile können automatisch auf bestimmte Spezifikationen (z.B. APA) eingestellt werden
* Referenzmanager dienen auch als digitale Bibliotheken
* Kommerzielle Referenzmanager sind z.B. EndNote, Citavi, Mendeley und Papers
* Kostenlose/Freemium Referenzmanager sind z.B. [JabRef}](https://www.jabref.org/) und [Zotero}](https://www.zotero.org/) 
* Eine Integration in Quarto erlaubt z.B. der Export der eigenen Library in das [BibTex}](http://www.bibtex.org/) Format.